openapi: 3.0.0

info:
  title: "Commitments API"
  description: |
    Endpoints and schemas for issuing proposer commitments and relevent helper functions.
  version: "v0.0.1 - Ethereum Commitments API Specification v0.0.1"
  contact:
    name: Ethereum Commitments Github
    url: https://github.com/eth-fabric/commitments-specs/issues
  license:
    name: "MIT License and Apache 2.0 License"
    url: "https://github.com/eth-fabric/commitments-specs/"

servers:
  - url: "{server_url}"
    variables:
      server_url:
        description: "Commitments API URL"
        default: "http://localhost/"

tags:
  - name: "Commitments API"
    description: "Endpoints and schemas for issuing proposer commitments and relevent helper functions."

x-constants:
  MAX_CONSTRAINTS_PER_SLOT: 32

paths:
  /commitments/v0/gateway/commitmentRequest:
    post:
      operationId: "postCommitmentRequest"
      tags:
        - Commitments API
      summary: "Request a new SignedCommitment"
      description: |
        A `CommitmentRequest` contains an opaque payload bytes input that can be decoded according to the `commitment_type`. 
        By making a request, the user / app / wallet is asking for the Gateway to make a commitment that is enforceable via the specified `slasher` contract.
        
        Each `commitment_type` has its own rules for how a Gateway maps a `CommitmentRequest.payload` to a `Commitment.payload`. 
        The `Commitment.request_hash` field is used to bind the `Commitment` to a specific `CommitmentRequest`, however this is not required to correspond 1:1.

        The `SignedCommitment` is the response to the `CommitmentRequest`. It contains the `Commitment` and the ECDSA signature over the `Commitment`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitmentRequest'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedCommitment'
        "400":
          description: "Bad Request - Invalid commitment request"
        "500":
          description: "Internal Server Error"
  /commitments/v0/gateway/commitmentResult/{request_hash}:
    get:
      operationId: "getCommitmentResult"
      tags:
        - Commitments API
      summary: "Request an old SignedCommitment"
      description: |
        When supplied with a valid `request_hash`, this endpoint responds with the `SignedCommitment` object containing the same `SignedCommitment.Commitment.request_hash`.
      parameters:
        - name: request_hash
          in: path
          required: true
          schema:
            type: bytes32
            format: string
          description: Hash of the CommitmentRequest to retrieve
          example: "0x1234567890123456789012345678901234567890000000000000000000000000"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedCommitment'
        "404":
          description: "Not Found - No commitment found for the given request hash"
        "500":
          description: "Internal Server Error"
  /commitments/v0/gateway/slots:
    get:
      operationId: "getSlots"
      tags:
        - Commitments API
      summary: "Get Gateway information for upcoming slots"
      description: |
        When called, the Gateway returns a `SlotInfo` for each upcoming L1 slot in the current or upcoming epoch. 
        Each `SlotInfo` contains a list of `Offering` objects which specify the types of commitments they offer for a given chain, e.g., inclusion preconfs for the L1.
        
        It should be noted that this endpoint does not provide guarantees that the Gateway is actually capable of providing these. 
        For example, for proposer commitments that require delegations, the user should also consult the Constraints API to verify if the Gateway received delegations for the slot in question.
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotInfoResponse'
        "500":
          description: "Internal Server Error"
  /commitments/v0/gateway/fee:
    get:
      operationId: "getFee"
      tags:
        - Commitments API
      summary: "Get commitment fee information"
      description: |
        Since each proposer commitment protocol may have differing pricing mechanisms, i.e., per-request or subscription based, 
        this endpoint is intentionally left generic. Users submit a `CommitmentRequest` and receive a `FeeInfo` object containing 
        opaque `payload` bytes and a `commitment_type` to decode the `payload` into protocol-specific pricing information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitmentRequest'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeInfo'
        "400":
          description: "Bad Request - Invalid commitment request"
        "500":
          description: "Internal Server Error"
  


components:
  schemas:
    CommitmentRequest:
      type: object
      properties:
        commitment_type:
          type: integer
          format: uint64
          description: The type of commitment
          example: 1
        payload:
          type: string
          format: byte
          description: Opaque input bytes used as part of the commitment
          example: ""
        slasher:
          type: string
          description: Slasher contract for resolving commitment disputes
          example: "0x1234567890123456789012345678901234567890"
      required:
        - commitment_type
        - payload
        - slasher
      example:
        commitment_type: 1
        payload: ""
        slasher: "0x1234567890123456789012345678901234567890"

    Commitment:
      type: object
      properties:
        commitment_type:
          type: integer
          format: uint64
          description: The type of commitment
          example: 1
        payload:
          type: string
          format: byte
          description: Opaque payload bytes of the commitment
          example: ""
        request_hash:
          type: string
          format: bytes32
          description: Hash of the CommitmentRequest this Commitment is for
          example: "0x1234567890123456789012345678901234567890000000000000000000000000"
        slasher:
          type: string
          description: Slasher contract for resolving commitment disputes
          example: "0x1234567890123456789012345678901234567890"
      required:
        - commitment_type
        - payload
        - request_hash
        - slasher
      example:
        commitment_type: 1
        payload: ""
        request_hash: "0x1234567890123456789012345678901234567890000000000000000000000000"
        slasher: "0x1234567890123456789012345678901234567890"

    SignedCommitment:
      type: object
      properties:
        commitment:
          $ref: '#/components/schemas/Commitment'
        signature:
          type: string
          description: The ECDSA signature of the commitment message
          example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1b"
      required:
        - commitment
        - signature
      example:
        commitment:
          commitment_type: 1
          payload: ""
          request_hash: "0x1234567890123456789012345678901234567890000000000000000000000000"
          slasher: "0x1234567890123456789012345678901234567890"
        signature: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1b"

    SlotInfo:
      type: object
      properties:
        slot:
          type: integer
          description: The L1 slot number
          example: 1000
        offerings:
          type: array
          items:
            $ref: '#/components/schemas/Offering'
          description: The list of chain offerings
      required:
        - slot
        - offerings
      example:
        slot: 1000
        offerings:
          - chain_id: 1
            commitment_types: [1, 2]
          - chain_id: 10
            commitment_types: [1]

    SlotInfoResponse:
      type: object
      properties:
        slots:
          type: array
          items:
            $ref: '#/components/schemas/SlotInfo'
          description: A list of slot infos
      required:
        - slots
      example:
        slots:
          - slot: 1000
            offerings:
              - chain_id: 1
                commitment_types: [1, 2]
              - chain_id: 10
                commitment_types: [1]
          - slot: 1001
            offerings:
              - chain_id: 1
                commitment_types: [1, 2]
              - chain_id: 10
                commitment_types: [1]

    Offering:
      type: object
      properties:
        chain_id:
          type: integer
          format: uint64
          description: The id of the target chain
          example: 1
        commitment_types:
          type: array
          items:
            type: integer
            format: uint64
          description: The types of commitments offered for the target chain
          example: [1, 2]
      required:
        - chain_id
        - commitment_types
      example:
        chain_id: 1
        commitment_types: [1, 2]

    FeeInfo:
      type: object
      properties:
        payload:
          type: string
          format: byte
          description: Opaque bytes containing fee info related to the commitment type
          example: ""
        commitment_type:
          type: integer
          format: uint64
          description: Type of commitment being requested
          example: 1
      required:
        - payload
        - commitment_type
      example:
        payload: ""
        commitment_type: 1